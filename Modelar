


#### To do list:
# 1 # GRID 10 x 10 km: Vetor > Investigar > grade vetorial : x=0.1000
# 2 # Cruzamento espacial da camada alvo (pontos de coleta/grid de entrevistas) com as camadas dos dados ambientais
# - Vetor > Gerenciar dados> Unir atributos por localização
# - podes transferir os dados brutos, utilizando a opção “Tomar atributos da primeira feição localizada”, 
# - ou transferir os dados sumarizados, média, soma, mínima, máxima ou mediana, utilizando a função “Tomar sumário de feições intersectantes”
# 3 # Modelagem Hierarquica de occupação
# 4 # Criar arquivos .tif ou .asc dos atributos ambientais do estado: declividade, densidade de humanos...
# - Polígonos em raster : complemento GDALtools "Raster > Conversion > Rasterizar (lembrar de salvar SRC)
# - Raster> extração > cortador: camada mascara=polígono base(alagoas)
# - Declividade: Raster > análise de terreno >“Camada com as elevações” =altitude; Fatorz=1
# 5 # Mapa


#########################################################################
# Polígono da ocorrência: 						#
# 1- Pontos presença em mapa de calor					#
# 2- Raster> extração > cortador: camada mascara=polígono base(alagoas)	#
# 3- Raster > calculadora raster : camada>0.9				#
# 4- Raster > Conversor >Poligonizar 					#
#########################################################################


########## MODELAGEM HIERARQUICA CPB ->OccuFP->Occu

data <- read.table(file = "clipboard", sep = "\t", header=TRUE)
str(data)
y <- as.matrix(data[,1:5]) # Grab 2006-9 monkeys det/nondet data
solos <- data[,"Solos_cor"]
chu <- data[,"chu"]
tmax <- data[,"Temp_max"]
tmin <- data[,"Temp_min"]
tmed <- data[,"Temp_med"]

# Correlacionar covariates
covs <- cbind(solos, chu, tmax, tmin, tmed)
par(mfrow = c(3,3))
for(i in 1:8){
hist(covs[,i], breaks = 50, col = "grey", main = colnames(covs)[i])
}
pairs(cbind(solos, chu, tmax, tmin, tmed))


# Load unmarked, format data (Occu=classique or OccuFP=false-positive) and summarize
library(unmarked)
umf1 <- unmarkedFrameOccuFP(y = y, siteCovs = data.frame(solos = solos, chu = chu, 
tmax = tmax, tmin = tmin, tmed = tmed), type = 3 )
#type 1: assume-se que o processo de detecção é idêntico aos modelos clássicos, onde as probabilidades de falsos negativos são estimadas, mas os falsos positivos não ocorrem. 
#type 2: podemos ter falsos negativos e falsos positivos. Tanto p (a real probabilidade de detecção) e fp (a - a probabilidade de observar falsos positivos) são estimados para as ocasiões em que este tipo de dados podem ocorrer. 
#type 3: assumimos que as observações podem incluir detecções confirmadas(=2) (assume-se que falsos positivos não ocorrem) e detecções incertas que podem ou não incluir falsos positivos. 
summary(umf1)

m1 <- occuFP(detformula = ~ 1, FPformula = ~1, stateformula = ~ 1, data = umf1) #modelo nulo
#Error in if (sum(type[2:3]) == 0) stop("Only type 1 data. No data types with false positives. Use occu instead.") 

umf <- unmarkedFrameOccu(y = y, siteCovs = data.frame(solos = solos, chu = chu, 
tmax = tmax, tmin = tmin, tmed = tmed))


# Fit a series of models for detection first and do model selection
summary(fm1 <- occu(~1 ~1, data=umf))
summary(fm2 <- occu(~1 ~tmin , data=umf))
summary(fm3 <- occu(~1 ~tmax, data=umf))
cbind(fm1@AIC, fm2@AIC, fm3@AIC)       # outra maneira de selecionar pelo AIC



########## MODELAGEM HIERARQUICA ENTREVISTAS >OccuFP->Occu

data <- read.table(file = "clipboard", sep = "\t", header=TRUE)
str(data)
data[-c(1,10,18,19,26,37,55,74,92),]

dataa = subset(data, data$biom == 1)
datam = subset(data, data$biom == 2)
str(datam)
str(dataa)

#possivel colocar variavel categorica (ex: estratos) mas ela deve ser numerica
#se usar letra o R dá erro e fecha

#lon.orig <- data[,"Lon"] # Unstandardised, original values of covariates
#lat.orig <- data[,"Lat"]
#alt.orig <- data[,"Alt"]
dec.orig <- data[,"Dec"]
veg.orig <- data[,"veg"]
agua <- data[,"agua"]
#agdis.orig <- data[,"agdis"]
area.orig <- data[,"areaKm2"]
par.orig <- data[,"par"]
form.orig <- data[,"form"]
isol.orig <- data[,"isol"]
urbd.orig <- data[,"urbd"]
agrd.orig <- data[,"agrd"]
pecd.orig <- data[,"pecd"]
popq.orig <- data[,"popq"]

#lon.orig <- datam[,"Lon"] # Unstandardised, original values of covariates
#lat.orig <- datam[,"Lat"]
#alt.orig <- datam[,"Alt"]
dec.orig <- datam[,"Dec"]
veg.orig <- datam[,"veg"]
area.orig <- datam[,"areaKm2"]
par.orig <- datam[,"par"]
form.orig <- datam[,"form"]
isol.orig <- datam[,"isol"]
urbd.orig <- datam[,"urbd"]
agrd.orig <- datam[,"monod"]
pecd.orig <- datam[,"pastd"]
popq.orig <- datam[,"popq"]

quest <- read.table(file = "clipboard", sep = "\t", header=TRUE)
questm = quest[-c(1:54,89),] 
edit(questm)

prego <- as.matrix(questm[,15:18]) # Monkeys det/nondet data

queca.orig <- as.matrix(questm[,7:10])
queco.orig <- as.matrix(questm[,11:14])

# Standardise covariates and mean-impute date and duration
# Compute means and standard deviations
means <- c(apply(cbind(dec.orig, veg.orig, area.orig, par.orig, form.orig,  
isol.orig, urbd.orig, agrd.orig, pecd.orig, popq.orig), 2, mean, na.rm=T)) 
sds <- c(apply(cbind(dec.orig, veg.orig, area.orig, par.orig, form.orig,  
isol.orig, urbd.orig, agrd.orig, pecd.orig, popq.orig), 2, sd, na.rm=T))
#na.rm=T esse codigo permite q a presença de NA não estrague o calculo 

sds <- c(apply(cbind(lon.orig, lat.orig, alt.orig, dec.orig, veg.orig, agdis.orig, area.orig, par.orig, form.orig,  
isol.orig, urbd.orig, agrd.orig, pecd.orig, popq.orig), 2, sd))

# Scale covariates  => ATENCAO: ordem das medias= ordem usada na funcao acima
#lon <- (lon.orig - means[1]) / sds[1]
#lat <- (lat.orig - means[2]) / sds[2]
#alt <- (alt.orig - means[3]) / sds[3]
dec <- (dec.orig - means[1]) / sds[1] #conferir para ter certeza de usar os valores certos
veg <- (veg.orig - means[2]) / sds[2]
#agdis <- (agdis.orig - means[3]) / sds[3]
area <- (area.orig - means[3]) / sds[3]
par <- (par.orig - means[4]) / sds[4]
form <- (form.orig - means[5]) / sds[5]
isol <- (isol.orig - means[6]) / sds[6]
urbd <- (urbd.orig - means[7]) / sds[7]
agrd <- (agrd.orig - means[8]) / sds[8]
pecd <- (pecd.orig - means[9]) / sds[9]
popq <- (popq.orig - means[10]) / sds[10]


#### OU  >>>>>> primeiro padroniza e depois chama um a um = NAO FUNCIONA NO UNMARKED
#pais <-decostand(paisagem, method="standardize") 	#Dados padronizados
#lon.s <- pais[,"Lon"]
#lat.s <- pais[,"Lat"]
#alt.s <- pais[,"Alt"]
dec.s <- pais[,"Dec"]
veg.s <- pais[,"veg"]
agua.s <- pais[,"agua"]
#agdis.s <- pais[,"agdis"]
area.s <- pais[,"area"]
par.s <- pais[,"par"]
form.s <- pais[,"form"]
isol.s <- pais[,"isol"]
urbd.s <- pais[,"urbd"]
agrd.s <- pais[,"agrd"]
pecd.s <- pais[,"pecd"]
popq.s <- pais[,"popq"]

# Load unmarked, format data and summarize
library(unmarked)
umf <- unmarkedFrameOccu(y = prego, siteCovs = data.frame(dec = dec, veg = veg,
par = par, form = form, isol = isol, urbd = urbd, 
agrd = agrd, pecd = pecd, popq = popq), 
obsCovs = list(queca = queca.orig, queco = queco.orig))
summary(umf)

# Fit a series of models for detection first and do model selection
summary(fm1 <- occu(~1 ~1, data=umf))
summary(fm2 <- occu(~queca ~1, data=umf))
summary(fm3 <- occu(~queco ~1, data=umf)) #a 75.3399
summary(fm4 <- occu(~queca+queco ~1, data=umf)) #menorAIC 97.16106
summary(fm5 <- occu(~area ~1, data=umf))
summary(fm6 <- occu(~area+queca ~1, data=umf))
summary(fm7 <- occu(~area+queco ~1, data=umf))
summary(fm8 <- occu(~area+queca+queco ~1, data=umf))


# Put the fitted models in a "fitList" = rank them by AIC
fms <- fitList('p(.)psi(.)' = fm1,
	'p(queca)psi(.)' = fm2,
	'p(queco)psi(.)' = fm3,
	'p(queca+queco)psi(.)' = fm4,
	'p(area)psi(.)' = fm5,
	'p(area+queca)psi(.)' = fm6,
	'p(area+queco)psi(.)' = fm7,
	'p(area+queca+queco)psi(.)' = fm8)

ms <- modSel(fms,nullmod='p(.)psi(.)')

# OR >>>>>> outra maneira de selecionar pelo AIC
cbind(fm1@AIC, fm2@AIC, fm3@AIC, fm4@AIC, fm5@AIC,fm6@AIC,fm7@AIC, fm8@AIC)       

### Continue with model fitting for occupancy, guided by AIC as we go

#Check effects of spatial location
summary(fm10 <- occu(~area+queca ~lon, data=umf))
summary(fm11 <- occu(~area+queca ~lat, data=umf))
summary(fm12 <- occu(~area+queca ~lon+lat, data=umf))
cbind(fm2@AIC, fm10@AIC, fm11@AIC, fm12@AIC)

#Check effects of water
summary(fm13 <- occu(~area+queco ~agua, data=umf))
summary(fm14 <- occu(~area+queco ~agdis, data=umf))
summary(fm15 <- occu(~area+queco ~agua+agdis, data=umf))
cbind(fm2@AIC, fm13@AIC, fm14@AIC, fm15@AIC)

#Check effects of declivity and vegetation cover 
summary(fm16 <- occu(~area+queco ~dec, data=umf)) #a:62.86781
summary(fm17 <- occu(~area+queco ~veg, data=umf))
summary(fm18 <- occu(~area+queco ~dec+veg, data=umf)) #a:63.94108
cbind(fm7@AIC, fm16@AIC, fm17@AIC, fm18@AIC) 

#Check effects of size, format and isolation
summary(fm22 <- occu(~area+queco ~area, data=umf)) #a:71.52573
summary(fm23 <- occu(~area+queco ~par, data=umf)) 
summary(fm24 <- occu(~area+queco ~form, data=umf))
summary(fm25 <- occu(~area+queco ~isol, data=umf)) 
summary(fm26 <- occu(~area+queco ~area+par, data=umf))
summary(fm27 <- occu(~area+queco ~area+form, data=umf))#71.99155
summary(fm28 <- occu(~area+queco ~area+isol, data=umf)) #a:72.42166
summary(fm29 <- occu(~area+queco ~par+isol, data=umf)) #m:39.98014
summary(fm30 <- occu(~area+queco ~area+par+isol, data=umf))
summary(fm31 <- occu(~area+queco ~area+form+isol, data=umf))
cbind(fm7@AIC, fm22@AIC, fm23@AIC, fm24@AIC, fm25@AIC, fm26@AIC, fm27@AIC, fm28@AIC,
fm29@AIC, fm30@AIC, fm31@AIC)


# Check effects of Anthropic Matriz
summary(fm32 <- occu(~area+queco ~urbd, data=umf))
summary(fm33 <- occu(~area+queco ~agrd, data=umf))#
summary(fm34 <- occu(~area+queco ~pecd, data=umf))
summary(fm35 <- occu(~area+queco ~popq, data=umf)) #a:73.69813
summary(fm36 <- occu(~area+queco ~popq+urbd, data=umf))
summary(fm37 <- occu(~area+queco ~urbd+agrd, data=umf))
summary(fm38 <- occu(~area+queco ~urbd+pecd, data=umf))
summary(fm39 <- occu(~area+queco ~urbd+agrd+pecd, data=umf))
summary(fm40 <- occu(~area+queco ~urbd+agrd+popq, data=umf))
summary(fm41 <- occu(~area+queco ~urbd+pecd+popq, data=umf))
summary(fm42 <- occu(~area+queco ~urbd+agrd+pecd+popq, data=umf))
summary(fm43 <- occu(~area+queco ~popq+pecd, data=umf)) 
summary(fm44 <- occu(~area+queco ~popq+agrd, data=umf)) #73.61764
summary(fm45 <- occu(~area+queco ~popq+agrd+pecd, data=umf))
summary(fm46 <- occu(~area+queco ~agrd+pecd, data=umf))
cbind(fm7@AIC, fm32@AIC, fm33@AIC, fm34@AIC, fm35@AIC, fm36@AIC, fm37@AIC, fm38@AIC, 
fm39@AIC, fm40@AIC, fm41@AIC, fm42@AIC, fm43@AIC, fm44@AIC, fm45@AIC, fm46@AIC)

##### Check best models (mantém os melhores d etapas anteriores e testa +combinações)  MATA ATLANTICA

summary(fm32)
cbind(fm6AIC, fm17@AIC, fm22@AIC , fm23@AIC, fm26@AIC, fm27@AIC, fm29@AIC, 
fm30@AIC, fm32@AIC, fm36@AIC, fm37@AIC, fm38@AIC, fm50@AIC)#ma

summary(fm50 <- occu(~area+queca ~veg+par, data=umf))#
summary(fm51 <- occu(~area+queca ~veg+area+par, data=umf)) #
summary(fm52 <- occu(~area+queca ~veg+area+isol, data=umf)) #
summary(fm53 <- occu(~area+queca ~veg+par+isol, data=umf)) #
summary(fm54 <- occu(~area+queca ~par+urbd, data=umf)) #
summary(fm55 <- occu(~area+queca ~veg+par+urbd, data=umf)) #
summary(fm56 <- occu(~area+queca ~par+urbd+popq, data=umf)) #
summary(fm58 <- occu(~area+queca ~par+urbd+agrd, data=umf)) #
summary(fm57 <- occu(~area+queca ~par+urbd+pecd, data=umf)) #
summary(fm59 <- occu(~area+queca ~queca, data=umf))
summary(fm59 <- occu(~area+queca ~queco, data=umf))
summary(fm60 <- occu(~area+queca ~queca+queco, data=umf))
summary(fm61 <- occu(~area+queca ~veg+queca, data=umf))
summary(fm62 <- occu(~area+queca ~veg+par+queca, data=umf))
summary(fm63 <- occu(~area+queca ~veg+par+urbd+queca, data=umf))
summary(fm64 <- occu(~area+queca ~par+queca, data=umf))
summary(fm65 <- occu(~area+queca ~par+urbd+queca, data=umf))
summary(fm66 <- occu(~area+queca ~urbd+queca, data=umf))

fms1 <- fitList('p(area+queca)psi(.)'=fm6,
	'p(area+queca)psi(par)'=fm23,
	'p(area+queca)psi(urbd)'=fm32,
	'p(area+queca)psi(veg+par)'=fm50,
	'p(area+queca)psi(veg+area+isol)'=fm52,
	'p(area+queca)psi(veg+par+isol)'=fm53,
	'p(area+queca)psi(veg+par+urbd)'=fm55,
	'p(area+queca)psi(par+urbd+agrd)'=fm58,
#	'p(area+queca)psi(par+urbd+pecd)'=fm57,
	'p(area+queca)psi(par+urbd+popq)'=fm56,
	'p(area+queca)psi(par+urbd)'=fm54)

ms1 <- modSel(fms1,nullmod='p(area+queca)psi(.)')	#

### PSI mata atlantica

backTransform(linearComb(fm54, c(1,0,0), type="state")) #psi(occu) na variavel media
# Estimate      SE LinComb (Intercept) par urbd
#   0.0045 0.00944    -5.4           1   0    0

## predizer ocupacao para valores especificos da covariavel
int.par.urbd<-data.frame(1,dec,area)
mat2<-data.matrix(int.par.urbd) #linearComb só le matrix

comb_lin_mta <- linearComb(fm54, mat2,# valores perim/area ratio padronizada e ordenados			
					 type="state")

backTransform(comb_lin_mta)

backTransform(linearComb(fm54, c(1,0,0), type="det")) #p(detec) qnd esforco amostral medio
# Estimate       SE LinComb (Intercept) area queca
#        1 5.04e-15    36.7           1    0     0

### P mata atlantica

## predizer deteccao para valores especificos da covariavel (preciso montar matrix
#comb_lin_dtma <- linearComb(fm54, matrix(c(1,area,0),# 1=intercept,valores da variavel do modelo q aparece na coluna do meio, 0=outra variavel (os valores dela sao considerados tbm no resultado)
							nrow=49,ncol=3,byrow=T), type="det")

#backTransform(comb_lin_dtma)

##### Check best models (mantém os melhores d etapas anteriores e testa +combinações)  CAATINGA

summary(fm50 <- occu(~area+queco ~dec+area+popq+agrd+pecd, data=umf))#
summary(fm51 <- occu(~area+queco ~dec+area+popq, data=umf)) #
summary(fm52 <- occu(~area+queco ~dec+area+agrd, data=umf)) #
summary(fm53 <- occu(~area+queco ~dec+area+pecd, data=umf)) #a:59.33758
summary(fm54 <- occu(~area+queco ~dec+area+popq+agrd, data=umf)) #
summary(fm55 <- occu(~area+queco ~dec+area+popq+pecd, data=umf)) #aa:60.04566
summary(fm56 <- occu(~area+queco ~dec+area+agrd+pecd, data=umf)) #
summary(fm57 <- occu(~area+queco ~dec+area, data=umf)) #a:61.74475
summary(fm58 <- occu(~area+queco ~dec*area, data=umf)) #a:56.67613
summary(fm59 <- occu(~area+queco ~dec+veg+area, data=umf))
summary(fm60 <- occu(~area+queco ~dec+veg+area+popq, data=umf))

fms <- fitList('p(area+queco)psi(.)'=fm7,
	'p(area+queco)psi(area+dec+popq+pecd)'=fm55,
	'p(area+queco)psi(area+dec+pecd)'=fm53,
	'p(area+queco)psi(area+dec+popq)'=fm51,
	'p(area+queco)psi(area+dec+veg)'=fm59,
	'p(area+queco)psi(area+dec)'=fm57)


ms <- modSel(fms,nullmod='p(area+queco)psi(.)')

cbind(fm7@AIC, fm50@AIC)#caat
cbind(fm51@AIC, fm52@AIC, fm53@AIC, fm54@AIC,fm55@AIC, fm56@AIC,fm57@AIC,fm58@AIC,fm59@AIC,fm60@AIC)

### PSI caatinga

backTransform(linearComb(fm57, c(1,0,0), type="state")) #psi(occu) na variavel media
# Estimate    SE LinComb (Intercept) dec area
#     0.29 0.101  -0.896           1   0    0

## predizer ocupacao para valores especificos da covariavel
int.dec.area<-data.frame(1,dec,area)
mat1<-data.matrix(int.dec.area) #linearComb só le matrix

comb_lin_caat <- linearComb(fm57, mat1,	type="state")
backTransform(comb_lin_caat)
#->add Shapefile de pontos no QGIS -> Interpolation


### P caatinga

backTransform(linearComb(fm57, c(1,0,0), type="det")) #p(detec) qnd esforco amostral medio
# Estimate     SE LinComb (Intercept) area queco
#    0.981 0.0214    3.95           1    0     0


#################### PLOTAR gráficos de predições UNI-dimensionais   (occu x cov) tutorial

# Create new covariates for prediction ('prediction covs')
orig.elev <- seq(200, 2500,,100) # New covs for prediction
orig.forest <- seq(0, 100,,100)
orig.date <- seq(15, 110,,100)
orig.duration <- seq(100, 550,,100)
ep <- (orig.elev - means[1]) / sds[1] # Standardize them like actual covs
fp <- (orig.forest - means[2]) / sds[2]
dp <- (orig.date - means[3]) / sds[3]
durp <- (orig.duration - means[4]) / sds[4]

# Obtain predictions
newData <- data.frame(elev=ep, forest=0)
pred.occ.elev <- predict(fm20, type="state", newdata=newData, appendData=TRUE)
newData <- data.frame(elev=0, forest=fp)
pred.occ.forest <- predict(fm20, type="state", newdata=newData, appendData=TRUE)
newData <- data.frame(date=dp, dur=0)
pred.det.date <- predict(fm20, type="det", newdata=newData, appendData=TRUE)
newData <- data.frame(date=0, dur=durp)
pred.det.dur <- predict(fm20, type="det", newdata=newData, appendData=TRUE)

# Plot predictions against unstandardized 'prediction covs'
par(mfrow = c(2,2), mar = c(5,5,2,3), cex.lab = 1.2)
plot(pred.occ.elev[[1]] ~ orig.elev, type = "l", lwd = 3, col = "blue", ylim = c(0,1),
las = 1, ylab = "Pred. occupancy prob.", xlab = "Elevation (m)", frame = F)
matlines(orig.elev, pred.occ.elev[,3:4], lty = 1, lwd = 1, col = "grey")
plot(pred.occ.forest[[1]] ~ orig.forest, type = "l", lwd = 3, col = "blue", ylim = c(0,1),
las = 1, ylab = "Pred. occupancy prob.", xlab = "Forest cover (%)", frame = F)
matlines(orig.forest, pred.occ.forest[,3:4], lty = 1, lwd = 1, col = "grey")
plot(pred.det.date[[1]] ~ orig.date, type = "l", lwd = 3, col = "blue", ylim = c(0,1),
las = 1, ylab = "Pred. detection prob.", xlab = "Date (1 = 1 April)", frame = F)
matlines(orig.date, pred.det.date[,3:4], lty = 1, lwd = 1, col = "grey")
plot(pred.det.dur[[1]] ~ orig.duration, type = "l", lwd = 3, col = "blue", ylim = c(0,1), las
= 1, ylab = "Pred. detection prob.", xlab = "Survey duration (min)", frame = F)
matlines(orig.duration, pred.det.dur[,3:4], lty = 1, lwd = 1, col = "grey")


################### PLOTAR gráficos de predições UNI-dimensionais   (occu x cov)  pratica

#### CAATINGA
########### fm57 area+dec
# Obtain predictions
#newData1 <- data.frame(area=seq(range(area)[1], range(area)[2], length=46))#sort(area))
#pred.occ.area <- predict(fm57, type="state", newdata=newData1, append=TRUE)

newData3 <- data.frame(queco=seq(min(queco), max(queco), length=46)
pred.det.queco <- predict(fm57, type="det", newdata=newData3, appendData=TRUE)

newData1d <- data.frame(area=0,dec=seq(min(dec), max(dec), length=46))
pred.occ.dec <- predict(fm57, type="state", newdata=newData1d, append=TRUE)
newData1a <- data.frame(area=seq(min(area), max(area), length=46),dec=0)
pred.occ.area <- predict(fm57, type="state", newdata=newData1a, append=TRUE)

dp.ori<- data.frame(dec1=seq(min(dec.orig), max(dec.orig), length=46), 
		area1=seq(min(area.orig), max(area.orig), length=46))
pred.occ.57d<- data.frame(pred.occ.dec,dp.ori)
pred.occ.57a<- data.frame(pred.occ.area,dp.ori)

par(mfrow = c(1,2), mar = c(5,5,2,3), cex.lab = 1.2)

## construa os plots
## ocupacao
plot(pred.occ.57a$area, pred.occ.57a$Predicted, type="l",lwd=3,xlab="Fragment size",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.57a$area, pred.occ.57a$lower, lty=2)
lines(pred.occ.57a$area, pred.occ.57a$upper, lty=2)

plot(pred.occ.57d$dec, pred.occ.57d$Predicted, type="l",lwd=3,xlab="Slope",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.57d$dec, pred.occ.57d$lower, lty=2)
lines(pred.occ.57d$dec, pred.occ.57d$upper, lty=2)


###### fm51 area+dec+popq
# Plot predictions against UNSTANDARDIZED 'prediction covs'
#add coluna data,orig
adp.ori<- data.frame(dec1=seq(min(dec.orig), max(dec.orig), length=46), 
		area1=seq(min(area.orig), max(area.orig), length=46), 
		popq1=seq(min(popq.orig), max(popq.orig), length=46))

newData2d <- data.frame(dec=seq(min(dec), max(dec), length=46), 
		area=0, popq=0)
pred.occ.d <- predict(fm51, type="state", newdata=newData2d, append=TRUE)

pred.occ.51d<- data.frame(pred.occ.d,adp.ori)

newData2a <- data.frame(dec=0,area=seq(min(area),max(area),length=46), popq=0)
pred.occ.a <- predict(fm51, type="state", newdata=newData2a, append=TRUE)

pred.occ.51a<- data.frame(pred.occ.a,adp.ori)

newData2p <- data.frame(dec=0,area=0, popq=seq(min(popq),max(popq),length=46))
pred.occ.p <- predict(fm51, type="state", newdata=newData2p, append=TRUE)

pred.occ.51p<- data.frame(pred.occ.p,adp.ori)


par(mfrow = c(1,3), mar = c(5,5,2,3), cex.lab = 1.2)

## construa os plots
## ocupacao
plot(pred.occ.51a$area1, pred.occ.51a$Predicted, type="l",lwd=3,xlab="Fragment size (Km2)",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.51a$area1, pred.occ.51a$lower, lty=2)
lines(pred.occ.51a$area1, pred.occ.51a$upper, lty=2)

plot(pred.occ.51d$dec1, pred.occ.51d$Predicted, type="l",lwd=3,xlab="Slope (%)",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.51d$dec1, pred.occ.51d$lower, lty=2)
lines(pred.occ.51d$dec1, pred.occ.51d$upper, lty=2)

plot(pred.occ.51p$popq1, pred.occ.51p$Predicted, type="l",lwd=3,xlab="Human population in 100 Km2",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.51p$popq1, pred.occ.51p$lower, lty=2)
lines(pred.occ.51p$popq1, pred.occ.51p$upper, lty=2)


## deteccao
plot(pred_detec$esforco,pred_detec$Predicted,type="l",lwd=3,xlab=" Fragment size ( ",
     ylab=expression (paste (italic("Sapajus "), "detection (p)",sep=" ")))
lines(pred_detec$esforco,pred_detec$lower)
lines(pred_detec$esforco,pred_detec$upper)

plot(pred_detec$esforco,pred_detec$Predicted,type="l",lwd=3,xlab=" Deforestation intensity ",
     ylab=expression (paste (italic("Sapajus "), "detection (p)",sep=" ")))
lines(pred_detec$esforco,pred_detec$lower)
lines(pred_detec$esforco,pred_detec$upper)


#### MATA ATLANTICA  
########## fm54 par+urbd
# Obtain predictions
newData1 <- data.frame(par=seq(max(par), min(par), length=46), urbd=seq(max(urbd), min(urbd), length=46))
pred.occ.par <- predict(fm54, type="state", newdata=newData1, appendData=TRUE)

newData3 <- data.frame(queco=sort(queca))
pred.det.queca <- predict(fm57, type="det", newdata=newData3, appendData=TRUE)

# Plot predictions against UNSTANDARDIZED 'prediction covs'
# data.orig
pu.ori<- data.frame(par1=seq(max(par.orig), min(par.orig), length=46), 
		urbd1=seq(max(urbd.orig), min(urbd.orig), length=46))

newData2p <- data.frame(par=seq(max(par), min(par), length=46), urbd=0)
pred.occ.p <- predict(fm54, type="state", newdata=newData2p, appendData=TRUE)

pred.occ.54p<- data.frame(pred.occ.p,pu.ori) #add data.orig

newData2u <- data.frame(par=0, urbd=seq(max(urbd), min(urbd), length=46))
pred.occ.u <- predict(fm54, type="state", newdata=newData2u, appendData=TRUE)

pred.occ.54u<- data.frame(pred.occ.u,pu.ori) #add data.orig

par(mfrow = c(1,2), mar = c(5,5,2,3), cex.lab = 1.2)

## construa os plots
## ocupacao
plot(pred.occ.54p$par1,pred.occ.54p$Predicted,type="l",lwd=3,xlab="Perimeter/Area",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.54p$par1, pred.occ.54p$lower, lty=2)
lines(pred.occ.54p$par1, pred.occ.54p$upper, lty=2)

plot(pred.occ.54u$urbd1,pred.occ.54u$Predicted,type="l",lwd=3,xlab="Urban matrix distance",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.54u$urbd1, pred.occ.54u$lower, lty=2)
lines(pred.occ.54u$urbd1, pred.occ.54u$upper, lty=2)


####### fm55 veg+par+urbd
# Obtain predictions

# Plot predictions against UNSTANDARDIZED 'prediction covs'
# data.orig
puv.ori<- data.frame(par1=seq(max(par.orig), min(par.orig), length=46), 
		urbd1=seq(max(urbd.orig), min(urbd.orig), length=46),
		veg1=seq(max(veg.orig), min(veg.orig), length=46))

newData3p <- data.frame(veg=0, par=seq(max(par), min(par), length=46), urbd=0)
pred.occ.3p <- predict(fm55, type="state", newdata=newData3p, appendData=TRUE)

pred.occ.55p<- data.frame(pred.occ.3p,puv.ori) #add data.orig

newData3u <- data.frame(veg=0, par=0, urbd=seq(max(urbd), min(urbd), length=46))
pred.occ.3u <- predict(fm55, type="state", newdata=newData3u, appendData=TRUE)

pred.occ.55u<- data.frame(pred.occ.3u,puv.ori) #add data.orig

newData3v <- data.frame(veg=seq(max(veg),min(veg),length=46), par=0, urbd=0)
pred.occ.3v <- predict(fm55, type="state", newdata=newData3v, appendData=TRUE)

pred.occ.55v<- data.frame(pred.occ.3u,puv.ori) #add data.orig

par(mfrow = c(1,3), mar = c(5,5,2,3), cex.lab = 1.2)

## construa os plots
## ocupacao
plot(pred.occ.55v$veg1,pred.occ.55v$Predicted,type="l",lwd=3,xlab="Vegetation index",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.55v$veg1, pred.occ.55v$lower, lty=2)
lines(pred.occ.55v$veg1, pred.occ.55v$upper, lty=2)

plot(pred.occ.55p$par1,pred.occ.55p$Predicted,type="l",lwd=3,xlab="Perimeter/Area",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.55p$par1, pred.occ.55p$lower, lty=2)
lines(pred.occ.55p$par1, pred.occ.55p$upper, lty=2)

plot(pred.occ.55u$urbd1,pred.occ.55u$Predicted,type="l",lwd=3,xlab="Urban matrix distance",
     ylab=expression (paste (italic("Sapajus "), "occupancy (",Psi,")",sep=" ")))
lines(pred.occ.55u$urbd1, pred.occ.55u$lower, lty=2)
lines(pred.occ.55u$urbd1, pred.occ.55u$upper, lty=2)







#################### PLOTAR gráficos de predições BI-dimensionais   (cov x cov x occu)

# Predict abundance and detection jointly along two separate covariate gradients
# abundance ~ (forest, elevation) and detection ~ (survey duration, date)
pred.matrix1 <- pred.matrix2 <- array(NA, dim = c(100, 100)) # Define arrays
for(i in 1:100){
for(j in 1:100){
newData1 <- data.frame(elev=ep[i], forest=fp[j]) # For abundance
pred <- predict(fm20, type="state", newdata=newData1)
pred.matrix1[i, j] <- pred$Predicted
newData2 <- data.frame(dur=durp[i], date=dp[j]) # For detection
pred <- predict(fm20, type="det", newdata=newData2)
pred.matrix2[i, j] <- pred$Predicted
}
}
par(mfrow = c(1,2), cex.lab = 1.2)
mapPalette <- colorRampPalette(c("grey", "yellow", "orange", "red"))
image(x=orig.elev, y=orig.forest, z=pred.matrix1, col = mapPalette(100), axes = FALSE,
xlab = "Elevation [m]", ylab = "Forest cover [%]")
contour(x=orig.elev, y=orig.forest, z=pred.matrix1, add = TRUE, lwd = 1.5, col = "blue",
labcex = 1.3)
axis(1, at = seq(min(orig.elev), max(orig.elev), by = 250))
axis(2, at = seq(0, 100, by = 10))
box()
title(main = "Expected squirrel occurrence prob.", font.main = 1)
points(data$ele, data$forest, pch="+", cex=1)
image(x=orig.duration, y=orig.date, z=pred.matrix2, col = mapPalette(100), axes = FALSE,
xlab = "Survey duration [min]", ylab = "Date (1 = April 1)")
contour(x=orig.duration, y=orig.date, z=pred.matrix2, add = TRUE, lwd = 1.5, col = "blue",
labcex = 1.3)
axis(1, at = seq(min(orig.duration), max(orig.duration), by = 50))
axis(2, at = seq(0, 100, by = 10))
box()
title(main = "Expected squirrel detection prob.", font.main = 1)
matpoints(as.matrix(data[, 13:15]), as.matrix(data[, 10:12]), pch="+", cex=1)


############# CRIAR MAPAS DE DISTRIBUIÇÂO

####### Load the landscape data

library(raster)
library(rgdal)

setwd("")         # diretorio da pasta com os arquivos .tif 

bio1.tif <- raster("bio01_neotropic_50km_gcs_wgs84.tif")        # importar um arquivo .tif ou .asc no formato rasterlayer 
bio1.tif              # visualizar as propriedades do arquivo raster importado 
plot(bio1.tif)        # plot do raster 

# Podemos importar diversos arquivos separadamente, atribuindo cada um a uma variável 
#ou podemos utilizar a função 'stack'

list.files(pattern = ".tif")           # listar os nomes dos arquivos na pasta do diretorio 
tif <- list.files(pattern = ".tif") 
tif.bios <- stack(tif)                 # importar os arquivos .tif no formato rasterstack 
tif.bios
names(tif.bios) <- paste0("bio", 1:19)  # renomear os arquivos raster importados 
tif.bios 
plot(tif.bios)            # plot de todos dos raster 
plot(tif.bios[[c(2, 5, 17, 18)]], col = rainbow(100, .7))     # plot de alguns dos raster 


# Get predictions of occupancy prob for each 1km2 quadrat
newData <- data.frame(elev = (tif.bios$elevation - means[1])/sds[1], forest = (tif.bios$forest - means[2])/sds[2])
predpsi <- predict(fm20, type="state", newdata=newData)        #fm20 = melhor função occu do unMarked


# Define new data frame with coordinates and outcome to be plotted
PARAM <- data.frame(x = tif.bios$x, y = tif.bios$y, z = predpsi$Predicted)
r1 <- rasterFromXYZ(PARAM)     # convert into raster object

# Mask quadrats with elevation greater than 2250
elev <- rasterFromXYZ(cbind(tif.bios$x, tif.bios$y, tif.bios$elevation))
elev[elev > 2250] <- NA
r1 <- mask(r1, elev)

# Plot species distribution map (Fig. 10-14 left)
par(mfrow = c(1,2), mar = c(1,2,2,5))
mapPalette <- colorRampPalette(c("grey", "yellow", "orange", "red"))
plot(r1, col = mapPalette(100), axes = F, box = F, main = "Capuchin monkey distribution between 2006 and 2009")

#Plot landscape characteristics
lakes <- readOGR(".", "lakes")
rivers <- readOGR(".", "rivers")
border <- readOGR(".", "border")
plot(rivers, col = "dodgerblue", add = TRUE)
plot(border, col = "transparent", lwd = 1.5, add = TRUE)
plot(lakes, col = "skyblue", border = "royalblue", add = TRUE)

# Plot SE of the species distrbution map (Fig. 10-14 right)
r2 <- rasterFromXYZ(data.frame(x = tif.bios$x, y = tif.bios$y, z = predpsi$SE))
r2 <- mask(r2, elev)
plot(r2, col = mapPalette(100), axes = F, box = F, main = "Uncertainty map between 2006 and 2009")
plot(rivers, col = "dodgerblue", add = TRUE)
plot(border, col = "transparent", lwd = 1.5, add = TRUE)
plot(lakes, col = "skyblue", border = "royalblue", add = TRUE)
points(data$coordx, data$coordy, pch = "+", cex = 0.8)        #add pontos de coleta






###### DENDROGRAMA + HEATMAP
#(1)Chamar os dados e pacote
library(vegan)
library(gplots)
library(RColorBrewer)

setwd("C:/R/intro/")
poli<-read.table("data-dout.txt",header=T,sep="\t")
prob<-poli[,1:4] #probabilidades de ocupação
row.names(prob)<-poli$local #nomeou todas as linhas com essa coluna
prob<-prob[,-1]		#depois tira essa coluna p ficar só o data frame

##
# (2) Criar mapa de calor comparando entre fragmentos:

# usando probabilidades de ocupação entre sp
scaleyellowred<- colorRampPalette(c("lightyellow","red"),space="rgb")(100)
heatmap(as.matrix(prob),Rowv=NA,Colv=NA,col=scaleyellowred) #cria mapa de calor

maxab<-apply(prob,1,max) # 2=colum 1=linha max=funçao q quero aplicar:aqui selecionei os valores maximos de cada linha
maxab
n1<-names(which(maxab<0.4))	#seleciona fragm com menos prob de ocupação
prob.1<-prob[,-which(names(prob) %in% n1)]	#retira esses fragm
heatmap(as.matrix(prob.1),Rowv=NA,Colv=NA,col=scaleyellowred,
margins=c(5,6))		#cria novo mapa de calor só com fragm com maior prob

#(3)Transformação dos dados da paisagem
paisagem<-poli[,5:10]
pairs(paisagem) 	#correlações
row.names(paisagem)<-poli$local #nomeou todas as linhas com essa coluna

# ou log
pairs(log(paisagem)) #confere
lopais<-log(paisagem) 
# ou padronização
pais.pad<-decostand(paisagem, method="standardize") 	#ou Padronização dos dados
#
pais.pad<-scale(paisagem)
##
#(4) Criar matriz de distancia
pais.bray <-vegdist(pais.pad, method="bray") #Bray-curtis
##
#(5) calcular cluster e coeficiente de correlaçao cofenetico 
cluster<-hclust(pais.bray, method="average")
cluster.coph<-cophenetic(cluster)

#compara matriz cofenetica com a matriz euclidiana, mais perto de 1 = +semelhantes :D
cor(pais.bray, cluster.coph) #resultado= 0.8686003 #nao usar a padronização pro metodo bray
##
# (6) Gerar mapa de calor com cluster
heatmap(as.matrix(prob),Rowv=as.dendrogram(cluster),
Colv=NA,col=scaleyellowred, margins=c(5,20),cexCol=1, cexRow=0.5)
	#cex=tamanho da letra; margins= proporção das margens entre colunas e linhas

help(heatmap)



